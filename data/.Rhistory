expanded <- data.frame(herd = rep(dL$herd, dL$count),
stock = rep(dL$stock, dL$count)
)
summary(expanded)
sum(dL$count)
d
Rinder
sum(Rinder$n)
head(expanded)
dL <- gather(d,dead,count,mortality:lived)
expanded <- data.frame(herd = rep(dL$herd, dL$count),
stock = rep(dL$stock, dL$count),
dead = rep(dL$dead, dL$count))
head(expanded)
length(expanded$herd)
dE$stock <- ifelse( dE$stock == "large", 1, 0)
dE <- data.frame(herd = rep(dL$herd, dL$count),
stock = rep(dL$stock, dL$count),
dead = rep(dL$dead, dL$count))
# change "stock" to 0/1 (large=1, small=0)
# change "dead" to 0/1 (mortality=1, lived=0)
dE$stock <- ifelse( dE$stock == "large", 1, 0)
dE$dead <- ifelse(dE$dead == "mortality",1, 0)
head(dE)
m1 <- map(
alist(
dead ~ dbinom(1, p),
logit(p) <- a + bSS*stock,
a ~ dnorm(0,10),
bSS ~ dnorm(0,10)
), data = dE )
precis(m1)
m2 <- map2stan( m1, warmup = 1000, iter=1e4)
precis(m2)
precis(m1)
compare(m1,m2)
logistic(0.03) # a
logistic(-0.13) # Bss
logistic(0.03) # probability of death in a small stock herd
logistic(-0.13 + 0.03) # probability of death in a large stock herd
logistic(-0.12 + 0.03) # probability of death in a large stock herd
precis(m2)
p <- link(m1)
y <- sim(m1)
p.mean <- apply(p,2,HPDI)
str(p.mean)
p.mean[1]
head(p.mean)
p.mean
precis(m1)
precis(m1)
exp(-0.12)
logistic(0.03) # probability of death in a small stock herd
logistic(-0.13)
logistic(-0.13 + 0.03) # probability of death in a large stock herd
50.7-47.5
rm(list = ls())
library(rethinking)
data(Rinder)
d <- Rinder
d$propdead <- d$mortality / d$n
d$stock <- ifelse( d$stock == "large", 1, 0)
head(d)
m1 <- map(
alist(
mortality ~ dbinom(n, p),
logit(p) <- a + bSS*stock,
a ~ dnorm(0,10),
bSS ~ dnorm(0,1)
), data = d)
precis(m1)
logistic(0.03) # probability of death in a small stock herd
logistic(-0.12 + 0.03) # probability of death in a large stock
logistic(-0.12 + 0.03) - logistic(0.03)
post <- extract.samples(m1)
large <- logistic(post$a + post$bSS)
small <- logistic(post$a)
difference <- large - small
diff1 <- quantile(difference,  probs=c(0.025, 0.5, 0.975))
dens(difference)
m2 <- map(
alist(
mortality ~ dbinom(n, p),
logit(p) <- a,
a ~ dnorm(0,10)
), data = d )
compare(m1,m2)
postcheck(m1,prob=0.95,n=1e4, window = 22)
for ( i in 1:11 ) {
x <- 1 + 2*(i-1)
y1 <- d$mortality[x]/d$n[x]
y2 <- d$mortality[x+1]/d$n[x+1]
lines( c(x,x+1) , c(y1,y2) , col=rangi2 , lwd=2 )
text( x+0.5 , (y1+y2)/2 + 0.05 , d$herd[x] , cex=0.8 , col=rangi2 )
}
m3<- map2stan(
alist(
mortality ~ dbinom( n , p ),
logit(p) <- a_herd[herd] + bm_herd*stock,
a_herd[herd] ~ dnorm(a, sigma),
bm_herd[herd] ~ dnorm(0,10),
a ~ dnorm(0,10),
sigma ~ dcauchy(0,1)
) ,
data=d , warmup=1000 , iter=5000 , chains=4 , cores=3 )
precis(m3, depth=2)
postcheck(m3, prob=0.95, window=22, title(main="Varying effects model"))
postcheck(m3, prob=0.95, window=22, title(main="Varying effects model"))
rm(list=ls())
library(rethinking)
library(rstan)
rm(list = ls())
rm(list = ls())
library(rethinking)
data(Rinder)
d <- Rinder
d
d$propdead <- d$mortality / d$n
d$stock <- ifelse( d$stock == "large", 1, 0)
head(d)
m1 <- map(
alist(
mortality ~ dbinom(n, p),
logit(p) <- a + bSS*stock,
a ~ dnorm(0,10),
bSS ~ dnorm(0,1)
), data = d)
precis(m1)
logistic(0.03) # probability of death in a small stock herd
logistic(-0.12 + 0.03) # probability of death in a large stock
logistic(-0.12 + 0.03) - logistic(0.03)
post <- extract.samples(m1)
large <- logistic(post$a + post$bSS)
small <- logistic(post$a)
difference <- large - small
diff1 <- quantile(difference,  probs=c(0.025, 0.5, 0.975))
dens(difference)
m2 <- map(
alist(
mortality ~ dbinom(n, p),
logit(p) <- a,
a ~ dnorm(0,10)
), data = d )
pred.dat <- list(herdID=1:22)
p <- link(m1)
y <- sim(m1)
p.mean <- apply(p, 2, mean)
p.HPDI <- apply(p, 2, HPDI, prob=0.95)
y.mean <- apply(y, 2, mean)
y.HPDI <- apply(y, 2, HPDI, prob=0.95)
p.mean
herdplot <- c(1:22)
# plot
plot( x=herdplot, y=d$propdead , ylim=c(0,1) , pch=16 ,
xlab="herd" , ylab="mortality proportion" ,
col=rangi2 , xlim=c(0,22))
axis(1, at=1:22, labels=seq(1:22))
lines(herdplot, p.mean)
shade(y.HPDI, herdplot)
shade(y.PI, stock.seq)
postcheck(m1,prob=0.95,n=1e4, window = 22)
p.HPDI
y.HPDI
shade(p.HPDI, herdplot)
plot( x=herdplot, y=d$propdead , ylim=c(0,1) , pch=16 ,
xlab="herd" , ylab="mortality proportion" ,
col=rangi2 , xlim=c(0,22))
axis(1, at=1:22, labels=seq(1:22))
lines(herdplot, p.mean)
shade(p.HPDI, herdplot)
str(y)
?sim
str(p)
head(d)
?rep
pred.dat <- list(d$herd,mortality,d$stock,n)
n <- rep(1,22)
n
mortality <- d$propdead
pred.dat <- list(d$herd,mortality,d$stock,n)
pred.dat
p <- link(m1, data=pred.dat)
m3<- map2stan(
alist(
mortality ~ dbinom( n , p ),
logit(p) <- a_herd[herd] + bm_herd*stock,
a_herd[herd] ~ dnorm(a, sigma),
bm_herd[herd] ~ dnorm(0,10),
a ~ dnorm(0,10),
sigma ~ dcauchy(0,1)
) ,
data=d , warmup=1000 , iter=5000 , chains=4 , cores=3 )
precis(m3, depth=2)
head(d)
pred.dat <- subset(d, select=c("herd","stock"))
mortality <- d$propdead
n <- rep(1,22)
pred.dat <- cbind(pred.dat, mortality, n)
pred.dat
p <- link(m1, data=pred.dat)
y <- sim(m1, data=pred.dat)
p.mean <- apply(p, 2, mean)
p.HPDI <- apply(p, 2, HPDI, prob=0.95)
y.mean <- apply(y, 2, mean)
y.HPDI <- apply(y, 2, HPDI, prob=0.95)
p.mean
herdplot <- c(1:22)
# plot
plot( x=herdplot, y=d$propdead , ylim=c(0,1) , pch=16 ,
xlab="herd" , ylab="mortality proportion" ,
col=rangi2 , xlim=c(0,22))
axis(1, at=1:22, labels=seq(1:22))
lines(herdplot, p.mean)
y.mean
shade(p.HPDI, herdplot)
shade(y.PI, stock.seq)
y.HPDI
?postcheck
m <- postcheck(m1,prob=0.95,n=1e4, window = 22)
str(m)
m
pred.dat
p <- link(m1)
y <- sim(m1, data=pred.dat)
y
dens(m1)
plot(precis(m1))
post <- extract.samples(m1)
large <- logistic(post$a + post$bSS)
small <- logistic(post$a)
difference <- large - small
diff1 <- quantile(difference,  probs=c(0.05, 0.5, 0.95))
dens(difference)
diff1
head(d)
plot(precis(m1))
rm(list = ls())
library(rethinking)
data(Rinder)
d <- Rinder
# calculate the raw proportion of mortality, will be used for plotting later
d$propdead <- d$mortality / d$n
# change stock: large=1, small=0
d$stock <- ifelse( d$stock == "large", 1, 0)
m1 <- map(
alist(
mortality ~ dbinom(n, p),
logit(p) <- a + bSS*stock,
a ~ dnorm(0,10),
bSS ~ dnorm(0,1)
), data = d)
precis(m1)
# try map2stan model
m3<- map2stan(
alist(
mortality ~ dbinom( n , p ),
logit(p) <- a_herd[herd] + (bm_herd)*stock,
a_herd[herd] ~ dnorm(a, sigma),
bm_herd[herd] ~ dnorm(b,sigma),
a ~ dnorm(0,10),
b ~ dnorm(0,1),
sigma ~ dcauchy(0,1)
) ,
data=d , warmup=1000 , iter=5000 , chains=4 , cores=3 )
postcheck(m3, prob=0.95, window=22, title(main="Varying effects model"))
postcheck(m3, prob=0.95, window=22)
compare(m1, m2, m3)
m2 <- map(
alist(
mortality ~ dbinom(n, p),
logit(p) <- a,
a ~ dnorm(0,10)
), data = d )
compare(m1, m2, m3)
rm(list=ls())
# Read in fish data (this is from all sites and all MPAs)
data <- read.csv('C:/Users/provo/Documents/Dropbox/NEW_MPAMYSTERY/SBS/DATA_ANALYSIS/SOUTHERN_INNER_BANDA_ARC_ECO_&_SOCIAL_RAP_2015/FISH_forR_2014_2015_2.8.2016.csv', header=T)
# Load packages
library(ggplot2)
library(reshape2)
data <- data[!data$Transect_No == "LS", ] # Remove long-swim (LS) transects
data$Sampling_Event_ID <- factor(data$Sampling_Event_ID)
# get number of transects per sample event
se <- unique(data$Sampling_Event_ID)
transects <- NULL
for (i in 1:length(se)) {
transects[i] <- length(unique(data[data$Sampling_Event_ID == se[i],]$Transect_ID))
}
num.transects.per.se <- as.data.frame(cbind(transects, as.character(se)))
colnames(num.transects.per.se) <- c("Freq","sample.event")
num.transects.per.se
getwd()
setwd("C:/Users/provo/Documents/GitHub/data")
setwd("C:\Users\provo\Documents\GitHub\data")
setwd("C:/Users/provo/Documents/GitHub/Coral_Triangle/data")
data <- read.csv("C:/Users/provo/Documents/GitHub/Coral_Triangle/data/mpa_profiles.csv", header=T)
head(data)
names(data)
datetxt <- as.Date(data$Date.Established)
head(data$Date.Established)
mode(data$Date.Established)
within(datetxt, date <- data.frame(do.call('rbind', strsplit(as.character(Date.Established), "/", fixed=TRUE))))
datetxt <- data$Date.Established
within(datetxt, date <- data.frame(do.call('rbind', strsplit(as.character(Date.Established), "/", fixed=TRUE))))
datetxt <- as.numeric(data$Date.Established)
datetxt
datetxt <- data$Date.Established
head(datatxt)
head(datetxt)
within(datetxt, date <- data.frame(do.call('rbind', strsplit(Date.Established, "/", fixed=TRUE))))
df <- data.frame(ID=11:13, FOO=c('a|b','b|c','x|y'))
df
summary(df)
str(df)
foo <- data.frame(do.call('rbind', strsplit(as.character(df$FOO),'|',fixed=TRUE)))
as.character(df$FOO)
df$FOO
as.character(Date.Established)
within(datetxt, date <- data.frame(do.call('rbind', strsplit(as.character(datetxt$Date.Established), "/", fixed=TRUE))))
as.character(datetxt$Date.Established)
datetxt$Date.Established
head(datetxt)
datetxt <- data[data$Date.Established,]
datetxt
datetxt <- data$[data$Date.Established,]
within(datetxt, date <- data.frame(do.call('rbind', strsplit(as.character(datetxt$Date.Established), "/", fixed=TRUE))))
datetxt <- subset(data, select=c("Date.Established"))
datetxt
within(datetxt, date <- data.frame(do.call('rbind', strsplit(as.character(datetxt$Date.Established), "/", fixed=TRUE))))
names(data)
datetxt <- subset(data, select=c("ID", "Date.Established"))
head(datetxt)
datetxt <- as.Date(datetxt$Date.Established)
summary(data)
data[data==""] <- NA
summary(data)
data <- data[-which(is.na(data$Date.Established)), ]
data <- read.csv("C:/Users/provo/Documents/GitHub/Coral_Triangle/data/mpa_profiles.csv", header=T)
data[data==""] <- NA # put 'NA' into empty cells
data <- data[-which(is.na(data$Date.Established)), ]
datetxt <- subset(data, select=c("ID", "Date.Established"))
datetxt <- as.Date(datetxt$Date.Established)
datetxt <- subset(data, select=c("ID", "Date.Established"))
within(datetxt, date <- data.frame(do.call('rbind', strsplit(as.character(datetxt$Date.Established), "/", fixed=TRUE))))
datatxt <- within(datetxt, date <- data.frame(do.call('rbind', strsplit(as.character(datetxt$Date.Established), "/", fixed=TRUE))))
datetxt <- within(datetxt, date <- data.frame(do.call('rbind', strsplit(as.character(datetxt$Date.Established), "/", fixed=TRUE))))
head(datetxt)
colnames(datetxt) <- c("ID","Date.Established_2","mo","day","yr")
colnames(datetxt)
datetxt <- as.data.frame(within(datetxt, date <- data.frame(do.call('rbind', strsplit(as.character(datetxt$Date.Established), "/", fixed=TRUE)))))
datetxt <- within(datetxt, date <- data.frame(do.call('rbind', strsplit(as.character(datetxt$Date.Established), "/", fixed=TRUE))))
str(datetxt)
library(stringr)
str_split_fixed(datetxt$Date.Established, "/", 3)
date <- data.frame(str_split_fixed(datetxt$Date.Established, "/", 3))
date
names(date)
colnames(date) <- c("mo","day","yr")
names(date)
data <- cbind(data, date)
data <- read.csv("C:/Users/provo/Documents/GitHub/Coral_Triangle/data/mpa_profiles.csv", header=T)
data[data==""] <- NA # put 'NA' into empty cells
data <- data[-which(is.na(data$Date.Established)), ]
date <- data.frame(str_split_fixed(date$Date.Established, "/", 3))
colnames(date) <- c("mo","day","yr")
data <- cbind(data, date)
data <- read.csv("C:/Users/provo/Documents/GitHub/Coral_Triangle/data/mpa_profiles.csv", header=T)
data[data==""] <- NA # put 'NA' into empty cells
data <- data[-which(is.na(data$Date.Established)), ]
date <- data.frame(str_split_fixed(data$Date.Established, "/", 3))
colnames(date) <- c("mo","day","yr")
data <- cbind(data, date)
names(data)
head(data$Reported.Marine.Area_ha)
head(data$Reported.Area_ha)
table(data$yr)
table(data$Name)
table(data$yr)
t <- subset(data, select=c("yr","Reported.Area_ha"))
yr.totals <- aggregate(t, by=yr, FUN=sum)
yr.totals <- aggregate(t, by="yr", FUN=sum)
head(t)
yr.totals <- aggregate(t, yr, FUN=sum)
yr.totals <- aggregate(t, t$yr, FUN=sum)
yr.totals <- aggregate(t, by=list(t$yr), FUN=sum)
yr.totals <- aggregate(t$Reported.Area_ha, by=list(t$yr), FUN=sum)
yr.totals
data[data$yr == "1900",]$Reported.Area_ha
sum(data[data$yr == "1900",]$Reported.Area_ha)
plot(x=yr.totals, y=Group.1)
scatterplot(x=yr.totals, y=Group.1)
plot(yr.totals, Group.1)
plot(yr.totals$x, yr.totals$Group.1)
plot(yr.totals$Group.1, yr.totals$x)
all.yrs <- seq(from=1900, to=2015, by=1)
all.yrs
area.add <- seq(0,length.out = length(all.yrs))
area.add
area.add <- rep(0,length.out = length(all.yrs))
area.add
all.yrs.table <- cbind(all.yrs,area.add)
all.yrs.table
all.yrs.table$area.add <- yr.totals$x[match(all.yrs.table$all.yrs, yr.totals$Group.1)]
all.yrs.table$all.yrs
all.yrs.table <- data.frame(cbind(all.yrs,area.add))
all.yrs.table
all.yrs.table$area.add <- yr.totals$x[match(all.yrs.table$all.yrs, yr.totals$Group.1)]
all.yrs.table
all.y[all.y=="NA"] <- 0
# need to fill out yr column so that have every yr
y <- seq(from=1900, to=2015, by=1)
area.added <- rep(0,length.out = length(y))
all.y <- data.frame(cbind(y,area.added))
all.y$area.added <- yr.totals$x[match(all.y$y, yr.totals$Group.1)]
all.y[all.y=="NA"] <- 0
all.y
all.y[all.y==NA] <- 0
all.y[all.y == NA] <- 0
all.y[is.na(all.y)] <- 0
all.y
plot(all.y$y, all.y$area.added)
y <- seq(from=1900, to=2015, by=1)
area.added <- rep(0,length.out = length(y))
all.y <- data.frame(cbind(y,area.added))
all.y$area.added <- yr.totals$x[match(all.y$y, yr.totals$Group.1)]
all.y[is.na(all.y)] <- c("")
plot(all.y$y, all.y$area.added)
plot(all.y$y, all.y$area.added, ylab="hectares added", xlab="year")
plot(all.y$y, all.y$area.added, ylab="hectares added", xlab="year",
main="total hectares added per yr (all countries)")
names(data)
t <- subset(data[data$Country == "Indonesia",], select=c("yr","Reported.Area_ha"))
yr.totals.indo <- aggregate(t$Reported.Area_ha, by=list(t$yr), FUN=sum)
plot(yr.totals$Group.1, yr.totals$x)
yr.totals.indo
yr.totals
plot(yr.totals.indo$Group.1, yr.totals.indo$x)
plot(all.y$y, all.y$area.added, ylab="hectares added", xlab="year",
main="total hectares added per yr (all CT countries)")
reg1 <- lm(area.added~year)
reg1 <- lm(area.added~y)
plot(all.y$y, all.y$area.added, ylab="hectares added", xlab="year",
main="total hectares added per yr (all CT countries)")
abline(reg1)
reg1
reg1 <- lm(all.y$area.added~all.y$y)
reg1 <- lm(all.y$area.added ~ all.y$y)
reg1 <- lm(all.y$area.added ~ y)
all.y
all.y[is.na(all.y)] <- 0
y <- seq(from=1900, to=2015, by=1)
area.added <- rep(0,length.out = length(y))
all.y <- data.frame(cbind(y,area.added))
all.y$area.added <- yr.totals$x[match(all.y$y, yr.totals$Group.1)]
all.y[is.na(all.y)] <- 0
reg1 <- lm(all.y$area.added ~ all.y$y)
reg1
plot(all.y$y, all.y$area.added, ylab="hectares added", xlab="year",
main="total hectares added per yr (all CT countries)")
abline(reg1)
all.y[all.y==0] <- ""
plot(all.y$y, all.y$area.added, ylab="hectares added each yr", xlab="year",
main="all CT countries")
abline(reg1)
reg1
all.y
data$Reported.Area_ha
summary(data$Reported.Area_ha)
sum(data[data$yr == "2015",]$Reported.Area_ha)
yr.totals
y <- seq(from=1900, to=2015, by=1)
area.added <- rep(0,length.out = length(y))
all.y <- data.frame(cbind(y,area.added))
all.y$area.added <- yr.totals$x[match(all.y$y, yr.totals$Group.1)]
all.y
all.y[is.na(all.y)] <- 0 #if no mpas were built, put zero for that yr
all.y[is.na(all.y)] <- 0 #if no mpas were built, put zero for that yr
# get regression line between yr and hectares
reg1 <- lm(all.y$area.added ~ all.y$y)
all.y
reg1 <- lm(all.y$area.added ~ all.y$y)
all.y[all.y==0] <- "" #remove points showing zero hectares
all.y
y <- seq(from=1900, to=2015, by=1)
area.added <- rep(0,length.out = length(y))
all.y <- data.frame(cbind(y,area.added))
all.y$area.added <- yr.totals$x[match(all.y$y, yr.totals$Group.1)]
all.y[is.na(all.y)] <- 0 #if no mpas were built, put zero for that yr
all.y
all.y[all.y==0.00] <- "" #remove points showing zero hectares
all.y
all.y <- data.frame(cbind(y,area.added))
all.y$area.added <- yr.totals$x[match(all.y$y, yr.totals$Group.1)]
all.y[is.na(all.y)] <- "" #remove points showing zero hectares
all.y
all.y <- data.frame(cbind(y,area.added))
all.y$area.added <- yr.totals$x[match(all.y$y, yr.totals$Group.1)]
yr.totals
all.y <- data.frame(cbind(y,area.added))
all.y$area.added <- yr.totals$x[match(all.y$y, yr.totals$Group.1)]
all.y[is.na(all.y)] <- "" #remove points showing zero hectares
plot(all.y$y, all.y$area.added, ylab="hectares / yr", xlab="year",
main="all CT countries")
abline(reg1)
all.y
area.added
all.y <- data.frame(cbind(y,area.added))
all.y
all.y$area.added <- yr.totals$x[match(all.y$y, yr.totals$Group.1)]
all.y
all.y[is.na(all.y)] <- "" #remove points showing zero hectares
all.y
